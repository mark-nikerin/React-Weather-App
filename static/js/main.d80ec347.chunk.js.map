{"version":3,"sources":["assets/icons.svg","components/Search/Search.js","components/Search/index.js","components/Loader/index.js","components/Loader/Loader.js","WeatherApp.js","serviceWorker.js","index.js"],"names":["module","exports","useInputValue","defaultValue","React","useState","value","setValue","clear","set","propTypes","PropTypes","string","Search","onSearch","searchField","location","className","onSubmit","event","preventDefault","trim","width","height","xlinkHref","icons","type","onChange","target","placeholder","Loader","style","display","justifyContent","margin","WeatherApp","CurrentInfo","lazy","Promise","resolve","setTimeout","Forecast","LocationKey","LocationName","locationInfo","setLocationInfo","API_KEY","process","currentInfo","setCurrentInfo","dailyForecast","setDailyForecast","getIcon","id","iconId","getLocationInfo","locationQuery","console","log","fetch","then","response","json","suggest","map","x","Key","LocalizedName","Country","getCurrentInfo","locationKey","conditions","result","LocalObservationDateTime","WeatherIcon","IsDayTime","Temperature","Imperial","Value","Unit","Metric","getDailyForecast","forecast","DailyForecasts","Date","Day","Icon","Phrase","ShortPhrase","Maximum","Wind","SpeedValue","Speed","SpeedUnit","DirectionDegrees","Direction","Degrees","DirectionName","Localized","Night","Minimum","number","isRequired","Suspense","fallback","locationName","forecasts","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,mC,wQCK3C,SAASC,IAAkC,IAApBC,EAAmB,uDAAJ,GAAI,EACdC,IAAMC,SAASF,GADD,mBACjCG,EADiC,KAC1BC,EAD0B,KAGxC,MAAO,CACLC,MAAO,kBAAMD,EAAS,KACtBD,MAAO,kBAAMA,GACbG,IAAK,SAACH,GAAD,OAAWC,EAASD,KA4C7BJ,EAAcQ,UAAY,CACxBP,aAAcQ,IAAUC,QAGXC,ICzDAA,EDaA,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SACVC,EAAcb,EADqB,EAAfc,UAY1B,OACE,0BAAMC,UAAU,SAASC,SAVL,SAACC,GACrBA,EAAMC,iBAEFL,EAAYT,QAAQe,SACtBP,EAASC,EAAYT,SACrBS,EAAYP,WAMZ,yBAAKS,UAAU,gBACb,yBAAKA,UAAU,cAAcK,MAAM,KAAKC,OAAO,MAC7C,yBAAKC,UAAS,UAAKC,IAAL,cAEhB,2BACEnB,MAAOS,EAAYT,QACnBoB,KAAK,SACLT,UAAU,eACVU,SAAU,SAACR,GAAD,OAAWJ,EAAYN,IAAIU,EAAMS,OAAOtB,QAClDuB,YAAY,oBAGhB,4BAAQZ,UAAU,gBAAgBS,KAAK,UACrC,yBAAKJ,MAAM,KAAKC,OAAO,MACrB,yBAAKC,UAAS,UAAKC,IAAL,gBEzCTK,G,MCCA,kBACb,yBAAKC,MAAO,CAAEC,QAAS,OAAQC,eAAgB,SAAUC,OAAQ,UAChE,yBAAKjB,UAAU,eAAc,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,kCCoQ1IkB,G,MAnQI,WACjB,IAAMC,EAAchC,IAAMiC,MACxB,kBACE,IAAIC,SAAQ,SAACC,GAAD,OACVC,YAAW,kBAAMD,EAAQ,sDAAqC,WAI9DE,EAAWrC,IAAMiC,MACrB,kBACE,IAAIC,SAAQ,SAACC,GAAD,OACVC,YAAW,kBAAMD,EAAQ,sDAAkC,WAX1C,EAeiBnC,IAAMC,SAAS,CACrDqC,YAAa,GACbC,aAAc,KAjBO,mBAehBC,EAfgB,KAeFC,EAfE,KAoBjBC,EAAUC,mCApBO,EAsBe3C,IAAMC,WAtBrB,mBAsBhB2C,EAtBgB,KAsBHC,EAtBG,OAwBmB7C,IAAMC,SAAS,IAxBlC,mBAwBhB6C,EAxBgB,KAwBDC,EAxBC,KA0BjBC,EAAU,SAACC,GACf,IAAIC,EAEJ,OAAQD,GACN,KAAK,EACL,KAAK,EACL,KAAK,GACHC,EAAS,YACT,MACF,KAAK,EACL,KAAK,EACL,KAAK,EACHA,EAAS,mBACT,MACF,KAAK,EACHA,EAAS,oBACT,MACF,KAAK,EACL,KAAK,EACL,KAAK,GACHA,EAAS,SACT,MACF,KAAK,GACL,KAAK,GACHA,EAAS,UACT,MACF,KAAK,GACL,KAAK,GACHA,EAAS,cACT,MACF,KAAK,GACL,KAAK,GACL,KAAK,GACHA,EAAS,gBACT,MACF,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACHA,EAAS,gBACT,MACF,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACHA,EAAS,OACT,MACF,KAAK,GACL,KAAK,GACL,KAAK,GACHA,EAAS,QACT,MACF,KAAK,GACL,KAAK,GACL,KAAK,GACHA,EAAS,cACT,MACF,KAAK,GACHA,EAAS,QACT,MACF,KAAK,GACL,KAAK,GACL,KAAK,GACHA,EAAS,qBACT,MACF,KAAK,GACHA,EAAS,sBACT,MACF,KAAK,GACL,KAAK,GACHA,EAAS,gBACT,MACF,KAAK,GACL,KAAK,GACHA,EAAS,gBACT,MACF,QACEA,EAAS,YAGb,OAAOA,GAGHC,EAAkB,SAACC,GACvBC,QAAQC,IAAIF,GACZG,MACE,+EACEb,EACA,MACAU,EACA,mBAEDI,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,IASInB,EATSmB,EAAQC,KAAI,SAACC,GAMxB,MALe,CACbvB,YAAauB,EAAEC,IACfvB,aAAcsB,EAAEE,cAAgB,KAAOF,EAAEG,QAAQD,kBAM3B,GAEtBvB,IACFC,EAAgBD,GAChByB,EAAezB,EAAaF,kBAK9B2B,EAAiB,SAACC,GACtBX,MACE,4DACEW,EACA,WACAxB,GAEDc,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACW,GACL,IAAIC,EAASD,EAAWP,KAAI,SAACC,GAgB3B,MAfgB,CACdQ,yBAA0BR,EAAEQ,yBAC5BC,YAAatB,EAAQa,EAAES,aACvBC,UAAWV,EAAEU,UACbC,YAAa,CACXC,SAAU,CACRC,MAAOb,EAAEW,YAAYC,SAASC,MAC9BC,KAAMd,EAAEW,YAAYC,SAASE,MAE/BC,OAAQ,CACNF,MAAOb,EAAEW,YAAYI,OAAOF,MAC5BC,KAAMd,EAAEW,YAAYI,OAAOD,WAOnC9B,EAAeuB,EAAO,IACtBS,EAAiBX,OAIjBW,EAAmB,SAACX,GACxBX,MACE,+DACEW,EACA,WACAxB,EACA,4CAEDc,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACsB,GACL,IAAIV,EAASU,EAASC,eAAenB,KAAI,SAACC,GAgCxC,MA/BkB,CAChBmB,KAAMnB,EAAEmB,KACRC,IAAK,CACHC,KAAMlC,EAAQa,EAAEoB,IAAIC,MACpBC,OAAQtB,EAAEoB,IAAIG,YACdZ,YAAa,CACXE,MAAOb,EAAEW,YAAYa,QAAQX,MAC7BC,KAAMd,EAAEW,YAAYa,QAAQV,MAE9BW,KAAM,CACJC,WAAY1B,EAAEoB,IAAIK,KAAKE,MAAMd,MAC7Be,UAAW5B,EAAEoB,IAAIK,KAAKE,MAAMb,KAC5Be,iBAAkB7B,EAAEoB,IAAIK,KAAKK,UAAUC,QACvCC,cAAehC,EAAEoB,IAAIK,KAAKK,UAAUG,YAGxCC,MAAO,CACLb,KAAMlC,EAAQa,EAAEkC,MAAMb,MACtBC,OAAQtB,EAAEkC,MAAMX,YAChBZ,YAAa,CACXE,MAAOb,EAAEW,YAAYwB,QAAQtB,MAC7BC,KAAMd,EAAEW,YAAYwB,QAAQrB,MAE9BW,KAAM,CACJC,WAAY1B,EAAEkC,MAAMT,KAAKE,MAAMd,MAC/Be,UAAW5B,EAAEkC,MAAMT,KAAKE,MAAMb,KAC9Be,iBAAkB7B,EAAEkC,MAAMT,KAAKK,UAAUC,QACzCC,cAAehC,EAAEkC,MAAMT,KAAKK,UAAUG,gBAM9C/C,EAAiBqB,OAiBvB,OAbApB,EAAQ1C,UAAY,CAClB2C,GAAI1C,IAAU0F,OAAOC,YAEvB/C,EAAgB7C,UAAY,CAC1BM,SAAUL,IAAUC,OAAO0F,YAE7BjC,EAAe3D,UAAY,CACzB4D,YAAa3D,IAAUC,OAAO0F,YAEhCrB,EAAiBvE,UAAY,CAC3B4D,YAAa3D,IAAUC,OAAO0F,YAI9B,yBAAKrF,UAAU,QACZ2B,EAAaF,aAAeM,EAC3B,6BACE,kBAAC,EAAD,CACE/B,UAAU,SACVH,SAAUyC,EACVvC,SAAU4B,EAAaD,eAEzB,kBAAC,IAAM4D,SAAP,CAAgBC,SAAU,kBAAC,EAAD,OACxB,kBAACpE,EAAD,CACEY,YAAaA,EACbyD,aAAc7D,EAAaD,eAE7B,kBAACF,EAAD,CAAUiE,UAAWxD,MAIzB,6BACE,wBAAIjC,UAAU,gBAAd,oBACA,kBAAC,EAAD,CAAQA,UAAU,SAASH,SAAUyC,QCtP3BoD,QACW,cAA7BC,OAAO5F,SAAS6F,UAEe,UAA7BD,OAAO5F,SAAS6F,UAEhBD,OAAO5F,SAAS6F,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1D,MAAK,SAAA2D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjE,QAAQiE,MAAMA,EAAMC,c","file":"static/js/main.d80ec347.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icons.d3b0947f.svg\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./search.css\";\r\nimport icons from \"../../assets/icons.svg\";\r\n\r\nfunction useInputValue(defaultValue = \"\") {\r\n  const [value, setValue] = React.useState(defaultValue);\r\n\r\n  return {\r\n    clear: () => setValue(\"\"),\r\n    value: () => value,\r\n    set: (value) => setValue(value),\r\n  };\r\n}\r\n\r\nconst Search = ({ onSearch, location }) => {\r\n  const searchField = useInputValue(location);\r\n\r\n  const searchHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (searchField.value().trim()) {\r\n      onSearch(searchField.value());\r\n      searchField.clear();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form className=\"search\" onSubmit={searchHandler}>\r\n      <div className=\"search-field\">\r\n        <svg className=\"search-icon\" width=\"18\" height=\"18\">\r\n          <use xlinkHref={`${icons}#search`}></use>\r\n        </svg>\r\n        <input\r\n          value={searchField.value()}\r\n          type=\"search\"\r\n          className=\"search-input\"\r\n          onChange={(event) => searchField.set(event.target.value)}\r\n          placeholder=\"Search city...\"\r\n        />\r\n      </div>\r\n      <button className=\"search-button\" type=\"submit\">\r\n        <svg width=\"15\" height=\"10\">\r\n          <use xlinkHref={`${icons}#arrow`}></use>\r\n        </svg>\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nSearch.propTypes = {\r\n  onSearch: PropTypes.func.isRequired,\r\n  location: PropTypes.string,\r\n};\r\n\r\nuseInputValue.propTypes = {\r\n  defaultValue: PropTypes.string,\r\n};\r\n\r\nexport default Search;\r\n","import Search from './Search';\r\n\r\nexport default Search;","import Loader from './Loader';\r\n\r\nexport default Loader;","import React from \"react\";\r\nimport \"./loader.css\"\r\n\r\nexport default () => (\r\n  <div style={{ display: 'flex', justifyContent: 'center', margin: '.5rem' }}>\r\n   <div className='lds-spinner'><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n  </div>\r\n) ","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Search from \"./components/Search\";\r\nimport Loader from \"./components/Loader\";\r\nimport \"./weatherApp.css\";\r\n\r\nconst WeatherApp = () => {\r\n  const CurrentInfo = React.lazy(\r\n    () =>\r\n      new Promise((resolve) =>\r\n        setTimeout(() => resolve(import(\"./components/CurrentInfo\")), 700)\r\n      )\r\n  );\r\n\r\n  const Forecast = React.lazy(\r\n    () =>\r\n      new Promise((resolve) =>\r\n        setTimeout(() => resolve(import(\"./components/Forecast\")), 700)\r\n      )\r\n  );\r\n\r\n  const [locationInfo, setLocationInfo] = React.useState({\r\n    LocationKey: \"\",\r\n    LocationName: \"\",\r\n  });\r\n\r\n  const API_KEY = process.env.REACT_APP_YOUR_API_KEY_NAME;\r\n\r\n  const [currentInfo, setCurrentInfo] = React.useState();\r\n\r\n  const [dailyForecast, setDailyForecast] = React.useState([]);\r\n\r\n  const getIcon = (id) => {\r\n    let iconId;\r\n\r\n    switch (id) {\r\n      case 1:\r\n      case 2:\r\n      case 30:\r\n        iconId = \"clear-day\";\r\n        break;\r\n      case 3:\r\n      case 4:\r\n      case 5:\r\n        iconId = \"clear-cloudy-day\";\r\n        break;\r\n      case 6:\r\n        iconId = \"partly-cloudy-day\";\r\n        break;\r\n      case 7:\r\n      case 8:\r\n      case 11:\r\n        iconId = \"cloudy\";\r\n        break;\r\n      case 12:\r\n      case 18:\r\n        iconId = \"showers\";\r\n        break;\r\n      case 13:\r\n      case 14:\r\n        iconId = \"drizzle-day\";\r\n        break;\r\n      case 15:\r\n      case 16:\r\n      case 17:\r\n        iconId = \"thunderstroms\";\r\n        break;\r\n      case 19:\r\n      case 20:\r\n      case 21:\r\n      case 43:\r\n        iconId = \"snow-flurries\";\r\n        break;\r\n      case 22:\r\n      case 23:\r\n      case 24:\r\n      case 44:\r\n        iconId = \"snow\";\r\n        break;\r\n      case 25:\r\n      case 26:\r\n      case 29:\r\n        iconId = \"sleet\";\r\n        break;\r\n      case 31:\r\n      case 33:\r\n      case 34:\r\n        iconId = \"clear-night\";\r\n        break;\r\n      case 32:\r\n        iconId = \"windy\";\r\n        break;\r\n      case 35:\r\n      case 36:\r\n      case 37:\r\n        iconId = \"clear-cloudy-night\";\r\n        break;\r\n      case 38:\r\n        iconId = \"partly-cloudy-night\";\r\n        break;\r\n      case 39:\r\n      case 40:\r\n        iconId = \"drizzle-night\";\r\n        break;\r\n      case 41:\r\n      case 42:\r\n        iconId = \"thunderstroms\";\r\n        break;\r\n      default:\r\n        iconId = \"clear-day\";\r\n    }\r\n\r\n    return iconId;\r\n  };\r\n\r\n  const getLocationInfo = (locationQuery) => {\r\n    console.log(locationQuery);\r\n    fetch(\r\n      \"https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=\" +\r\n        API_KEY +\r\n        \"&q=\" +\r\n        locationQuery +\r\n        \"&language=en-US\"\r\n    )\r\n      .then((response) => response.json())\r\n      .then((suggest) => {\r\n        let result = suggest.map((x) => {\r\n          let location = {\r\n            LocationKey: x.Key,\r\n            LocationName: x.LocalizedName + \", \" + x.Country.LocalizedName,\r\n          };\r\n\r\n          return location;\r\n        });\r\n\r\n        let locationInfo = result[0];\r\n\r\n        if (locationInfo) {\r\n          setLocationInfo(locationInfo);\r\n          getCurrentInfo(locationInfo.LocationKey);\r\n        }\r\n      });\r\n  };\r\n\r\n  const getCurrentInfo = (locationKey) => {\r\n    fetch(\r\n      \"https://dataservice.accuweather.com/currentconditions/v1/\" +\r\n        locationKey +\r\n        \"?apikey=\" +\r\n        API_KEY\r\n    )\r\n      .then((response) => response.json())\r\n      .then((conditions) => {\r\n        let result = conditions.map((x) => {\r\n          let condition = {\r\n            LocalObservationDateTime: x.LocalObservationDateTime,\r\n            WeatherIcon: getIcon(x.WeatherIcon),\r\n            IsDayTime: x.IsDayTime,\r\n            Temperature: {\r\n              Imperial: {\r\n                Value: x.Temperature.Imperial.Value,\r\n                Unit: x.Temperature.Imperial.Unit,\r\n              },\r\n              Metric: {\r\n                Value: x.Temperature.Metric.Value,\r\n                Unit: x.Temperature.Metric.Unit,\r\n              },\r\n            },\r\n          };\r\n          return condition;\r\n        });\r\n\r\n        setCurrentInfo(result[0]);\r\n        getDailyForecast(locationKey);\r\n      });\r\n  };\r\n\r\n  const getDailyForecast = (locationKey) => {\r\n    fetch(\r\n      \"https://dataservice.accuweather.com/forecasts/v1/daily/5day/\" +\r\n        locationKey +\r\n        \"?apikey=\" +\r\n        API_KEY +\r\n        \"&language=en-US&details=true&metric=true\"\r\n    )\r\n      .then((response) => response.json())\r\n      .then((forecast) => {\r\n        let result = forecast.DailyForecasts.map((x) => {\r\n          let dayForecast = {\r\n            Date: x.Date,\r\n            Day: {\r\n              Icon: getIcon(x.Day.Icon),\r\n              Phrase: x.Day.ShortPhrase,\r\n              Temperature: {\r\n                Value: x.Temperature.Maximum.Value,\r\n                Unit: x.Temperature.Maximum.Unit,\r\n              },\r\n              Wind: {\r\n                SpeedValue: x.Day.Wind.Speed.Value,\r\n                SpeedUnit: x.Day.Wind.Speed.Unit,\r\n                DirectionDegrees: x.Day.Wind.Direction.Degrees,\r\n                DirectionName: x.Day.Wind.Direction.Localized,\r\n              },\r\n            },\r\n            Night: {\r\n              Icon: getIcon(x.Night.Icon),\r\n              Phrase: x.Night.ShortPhrase,\r\n              Temperature: {\r\n                Value: x.Temperature.Minimum.Value,\r\n                Unit: x.Temperature.Minimum.Unit,\r\n              },\r\n              Wind: {\r\n                SpeedValue: x.Night.Wind.Speed.Value,\r\n                SpeedUnit: x.Night.Wind.Speed.Unit,\r\n                DirectionDegrees: x.Night.Wind.Direction.Degrees,\r\n                DirectionName: x.Night.Wind.Direction.Localized,\r\n              },\r\n            },\r\n          };\r\n          return dayForecast;\r\n        });\r\n        setDailyForecast(result);\r\n      });\r\n  };\r\n\r\n  getIcon.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n  };\r\n  getLocationInfo.propTypes = {\r\n    location: PropTypes.string.isRequired,\r\n  };\r\n  getCurrentInfo.propTypes = {\r\n    locationKey: PropTypes.string.isRequired,\r\n  };\r\n  getDailyForecast.propTypes = {\r\n    locationKey: PropTypes.string.isRequired,\r\n  };\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      {locationInfo.LocationKey && currentInfo ? (\r\n        <div>\r\n          <Search\r\n            className=\"search\"\r\n            onSearch={getLocationInfo}\r\n            location={locationInfo.LocationName}\r\n          />\r\n          <React.Suspense fallback={<Loader />}>\r\n            <CurrentInfo\r\n              currentInfo={currentInfo}\r\n              locationName={locationInfo.LocationName}\r\n            />\r\n            <Forecast forecasts={dailyForecast} />\r\n          </React.Suspense>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <h1 className=\"search-title\">Weather Forecast</h1>\r\n          <Search className=\"search\" onSearch={getLocationInfo} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherApp;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './normalize.css';\r\nimport WeatherApp from './WeatherApp';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <WeatherApp />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}