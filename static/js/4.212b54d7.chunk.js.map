{"version":3,"sources":["assets/weather-icons.svg","components/Forecast/ForecastItem/index.js","components/Forecast/ForecastItem/ForecastItem.js","components/Forecast/DetailsPane/index.js","components/Forecast/DetailsPane/DetailsPane.js","components/Forecast/Forecast.js","components/Forecast/index.js"],"names":["module","exports","ForecastItem","id","isSelected","dayForecast","onDetailsOpen","daySign","Day","Temperature","Value","nightSign","Night","className","onClick","bind","moment","Date","format","width","height","xlinkHref","icons","Icon","Math","round","Unit","Wind","SpeedValue","SpeedUnit","DirectionDegrees","DirectionName","DetailsPane","details","daySignFeel","RealFeelValue","nightSignFeel","Phrase","RainProbability","CloudCover","Sun","Rise","toUpperCase","Set","Moon","Forecast","forecasts","React","useState","show","data","setDetails","Fragment","map","key"],"mappings":"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","file":"static/js/4.212b54d7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/weather-icons.40a27933.svg\";","import ForecastItem from './ForecastItem';\r\n\r\nexport default ForecastItem;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport moment from \"moment\";\r\nimport \"./forecastItem.css\";\r\nimport icons from \"../../../assets/weather-icons.svg\";\r\n\r\nconst ForecastItem = ({ id, isSelected, dayForecast, onDetailsOpen }) => {\r\n  const daySign =\r\n    dayForecast.Day.Temperature.Value > 0\r\n      ? \"+\"\r\n      : dayForecast.Day.Temperature.Value === 0\r\n      ? \"\"\r\n      : \"-\";\r\n\r\n  const nightSign =\r\n    dayForecast.Night.Temperature.Value > 0\r\n      ? \"+\"\r\n      : dayForecast.Night.Temperature.Value === 0\r\n      ? \"\"\r\n      : \"-\";\r\n\r\n  return (\r\n    <div className={isSelected ? \"forecast-item-active \": \"forecast-item\"} onClick={onDetailsOpen.bind(null, id)}>\r\n      <div className=\"day-info\">\r\n        <h3>{moment(dayForecast.Date).format(\"dddd\")}</h3>\r\n        <p>{moment(dayForecast.Date).format(\"MMMM D\")}</p>\r\n      </div>\r\n      <div className=\"weather-info\">\r\n        <div className=\"weather-item\">\r\n          <span>\r\n            <svg width=\"48\" height=\"48\">\r\n              <use xlinkHref={`${icons}#${dayForecast.Day.Icon}`}></use>\r\n            </svg>\r\n            {daySign}\r\n            {Math.round(dayForecast.Day.Temperature.Value)}°\r\n            {dayForecast.Day.Temperature.Unit}\r\n          </span>\r\n          <span>\r\n            <svg width=\"48\" height=\"48\">\r\n              <use xlinkHref={`${icons}#${dayForecast.Night.Icon}`}></use>\r\n            </svg>\r\n            {nightSign}\r\n            {Math.round(dayForecast.Night.Temperature.Value)}°\r\n            {dayForecast.Night.Temperature.Unit}\r\n          </span>\r\n        </div>\r\n        <div className=\"weather-item\">\r\n          <div className=\"wind-info-title\">\r\n            <span>Day</span>\r\n            <span>Night</span>\r\n          </div>\r\n          <div className=\"wind-info\">\r\n            <svg width=\"34\" height=\"24\">\r\n              <use xlinkHref={`${icons}#wind`}></use>\r\n            </svg>\r\n            <span>{dayForecast.Day.Wind.SpeedValue} {dayForecast.Day.Wind.SpeedUnit}</span>\r\n            <span>{dayForecast.Night.Wind.SpeedValue} {dayForecast.Night.Wind.SpeedUnit}</span>\r\n          </div>\r\n          <div className=\"wind-info\">\r\n            <svg width=\"34\" height=\"24\">\r\n              <use xlinkHref={`${icons}#compass`}></use>\r\n            </svg>\r\n            <span>{dayForecast.Day.Wind.DirectionDegrees}° {dayForecast.Day.Wind.DirectionName}</span>\r\n            <span>{dayForecast.Night.Wind.DirectionDegrees}° {dayForecast.Night.Wind.DirectionName}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nForecastItem.propTypes = {\r\n  dayForecast: PropTypes.object.isRequired,\r\n  onDetailsOpen: PropTypes.func.isRequired,\r\n  id: PropTypes.number.isRequired,\r\n  isSelected: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default ForecastItem;\r\n","import DetailsPane from \"./DetailsPane\";\r\n\r\nexport default DetailsPane;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport moment from \"moment\";\r\nimport \"./detailsPane.css\";\r\nimport icons from \"../../../assets/weather-icons.svg\";\r\n\r\nconst DetailsPane = ({ details }) => {\r\n  const daySign =\r\n    details.Day.Temperature.Value > 0\r\n      ? \"+\"\r\n      : details.Day.Temperature.Value === 0\r\n      ? \"\"\r\n      : \"-\";\r\n\r\n  const nightSign =\r\n    details.Night.Temperature.Value > 0\r\n      ? \"+\"\r\n      : details.Night.Temperature.Value === 0\r\n      ? \"\"\r\n      : \"-\";\r\n\r\n  const daySignFeel =\r\n    details.Day.Temperature.RealFeelValue > 0\r\n      ? \"+\"\r\n      : details.Day.Temperature.RealFeelValue === 0\r\n      ? \"\"\r\n      : \"-\";\r\n\r\n  const nightSignFeel =\r\n    details.Night.Temperature.RealFeelValue > 0\r\n      ? \"+\"\r\n      : details.Night.Temperature.RealFeelValue === 0\r\n      ? \"\"\r\n      : \"-\";\r\n\r\n  return (\r\n    <div className=\"details-pane\">\r\n      <div className=\"temperatures\">\r\n        <div className=\"temperatures-item\">\r\n          <div className=\"weather\">\r\n            <svg width=\"48\" height=\"48\">\r\n              <use xlinkHref={`${icons}#${details.Day.Icon}`}></use>\r\n            </svg>\r\n            <p>\r\n              {daySign}\r\n              {Math.round(details.Day.Temperature.Value)}°\r\n              {details.Day.Temperature.Unit}\r\n            </p>\r\n          </div>\r\n          <div className=\"feels-like\">\r\n            <p>{details.Day.Phrase}</p>\r\n            <p>\r\n              Feels like: {daySignFeel}\r\n              {Math.round(details.Day.Temperature.RealFeelValue)}°\r\n              {details.Day.Temperature.Unit}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"temperatures-item\">\r\n          <div className=\"weather\">\r\n            <svg width=\"48\" height=\"48\">\r\n              <use xlinkHref={`${icons}#${details.Night.Icon}`}></use>\r\n            </svg>\r\n            <p>\r\n              {nightSign}\r\n              {Math.round(details.Night.Temperature.Value)}°\r\n              {details.Night.Temperature.Unit}\r\n            </p>\r\n          </div>\r\n          <div className=\"feels-like\">\r\n            <p>{details.Night.Phrase}</p>\r\n            <p>\r\n              Feels like: {nightSignFeel}\r\n              {Math.round(details.Night.Temperature.RealFeelValue)}°\r\n              {details.Night.Temperature.Unit}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"divider\"></div>\r\n      <div className=\"statistics\">\r\n        <div className=\"statistics-item\">\r\n          <p>Rain probability: {details.Day.RainProbability}%</p>\r\n          <p>Cloud cover: {details.Day.CloudCover}%</p>\r\n        </div>\r\n        <div className=\"statistics-item\">\r\n          <p>Rain probability: {details.Night.RainProbability}%</p>\r\n          <p>Cloud cover: {details.Night.CloudCover}%</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"divider\"></div>\r\n      <div className=\"set-rise\">\r\n        <div className=\"set-rise-item\">\r\n          <svg className=\"sun-icon\" width=\"48\" height=\"48\">\r\n            <use xlinkHref={`${icons}#sun-rise`}></use>\r\n          </svg>\r\n          <p>{moment(details.Sun.Rise).format(\"h:mm a\").toUpperCase()}</p>\r\n        </div>\r\n        <div className=\"set-rise-item\">\r\n          <svg className=\"sun-icon\" width=\"48\" height=\"48\">\r\n            <use xlinkHref={`${icons}#sun-set`}></use>\r\n          </svg>\r\n          <p>{moment(details.Sun.Set).format(\"h:mm a\").toUpperCase()}</p>\r\n        </div>\r\n      </div>\r\n      <div className=\"divider\"></div>\r\n      <div className=\"set-rise\">\r\n        <div className=\"set-rise-item\">\r\n          <svg className=\"moon-icon\" width=\"42\" height=\"42\">\r\n            <use xlinkHref={`${icons}#moon-rise`}></use>\r\n          </svg>\r\n          <p>{moment(details.Moon.Rise).format(\"h:mm a\").toUpperCase()}</p>\r\n        </div>\r\n        <div className=\"set-rise-item\">\r\n          <svg className=\"moon-icon\" width=\"42\" height=\"42\">\r\n            <use xlinkHref={`${icons}#moon-set`}></use>\r\n          </svg>\r\n          <p>{moment(details.Moon.Set).format(\"h:mm a\").toUpperCase()}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nDetailsPane.propTypes = {\r\n  details: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default DetailsPane;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ForecastItem from \"./ForecastItem\";\r\nimport DetailsPane from \"./DetailsPane\";\r\nimport \"./forecast.css\";\r\n\r\nfunction Forecast({ forecasts }) {\r\n  const [details, setDetails] = React.useState({\r\n    id: -1,\r\n    show: false,\r\n    data: {},\r\n  });\r\n\r\n  const onDetailsOpen = (id) => {\r\n    if (details.id && details.id === id) {\r\n      setDetails({ id: -1, show: false, data: null });\r\n    } else {\r\n      const data = forecasts[id - 1];\r\n      setDetails({ id: id, show: true, data: data });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"forecast\">\r\n        {forecasts.map((dayForecast, id) => {\r\n          return (\r\n            <ForecastItem\r\n              dayForecast={dayForecast}\r\n              key={id}\r\n              id={id + 1}\r\n              isSelected={id === details.id - 1}\r\n              onDetailsOpen={onDetailsOpen}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n      {details && details.show && <DetailsPane details={details.data} />}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nForecast.propTypes = {\r\n  forecasts: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n};\r\n\r\nexport default Forecast;\r\n","import Forecast from './Forecast';\r\n\r\nexport default Forecast;"],"sourceRoot":""}